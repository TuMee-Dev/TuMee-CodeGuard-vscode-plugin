{
  "$schema": "./language-scopes.schema.json",
  "description": "Tree-sitter node type mappings for semantic scopes across languages",
  "version": "1.0.0",
  "commonPatterns": {
    "blocks": ["if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
    "jsBlocks": ["statement_block", "object", "object_expression", "array", "array_expression"],
    "jsFunctions": ["function_declaration", "function_expression", "arrow_function", "method_definition"],
    "jsClasses": ["class_declaration", "class_expression", "object", "object_expression"]
  },
  "languages": {
    "javascript": {
      "scopes": {
        "func": ["function_declaration", "function_expression", "arrow_function", "method_definition"],
        "class": ["class_declaration", "class_expression", "object", "object_expression"],
        "block": ["if_statement", "for_statement", "while_statement", "try_statement", "switch_statement", "statement_block", "object", "object_expression", "array", "array_expression"],
        "sig": ["function_declaration", "method_definition", "function_signature"],
        "body": ["statement_block", "class_body"],
        "method": ["method_definition"],
        "import": ["import_statement"],
        "export": ["export_statement"]
      }
    },
    "typescript": {
      "extends": "javascript",
      "scopes": {
        "func": ["method_signature"],
        "class": ["interface_declaration"],
        "sig": ["method_signature", "function_signature"],
        "body": ["interface_body"],
        "method": ["method_signature"]
      }
    },
    "tsx": {
      "extends": "typescript"
    },
    "python": {
      "scopes": {
        "func": ["function_definition"],
        "class": ["class_definition"],
        "block": ["block", "if_statement", "for_statement", "while_statement", "try_statement", "with_statement", "dictionary", "list", "set"],
        "sig": ["function_definition"],
        "body": ["block"],
        "method": ["function_definition"],
        "import": ["import_statement", "import_from_statement"],
        "docstring": ["expression_statement"]
      }
    },
    "java": {
      "scopes": {
        "func": ["method_declaration", "constructor_declaration"],
        "class": ["class_declaration", "interface_declaration", "enum_declaration"],
        "block": ["block", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["method_declaration", "constructor_declaration"],
        "body": ["block", "class_body", "interface_body", "enum_body"],
        "method": ["method_declaration"],
        "import": ["import_declaration"]
      }
    },
    "csharp": {
      "scopes": {
        "func": ["method_declaration", "constructor_declaration", "property_declaration", "local_function_statement"],
        "class": ["class_declaration", "interface_declaration", "struct_declaration", "record_declaration"],
        "block": ["block", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["method_declaration", "constructor_declaration"],
        "body": ["block", "class_body", "interface_body"],
        "method": ["method_declaration"],
        "import": ["using_directive"]
      }
    },
    "go": {
      "scopes": {
        "func": ["function_declaration", "method_declaration"],
        "class": ["type_declaration"],
        "block": ["block", "if_statement", "for_statement", "switch_statement"],
        "sig": ["function_declaration", "method_declaration"],
        "body": ["block"],
        "method": ["method_declaration"],
        "import": ["import_declaration"]
      }
    },
    "rust": {
      "scopes": {
        "func": ["function_item", "function_signature_item"],
        "class": ["struct_item", "enum_item", "trait_item", "impl_item"],
        "block": ["block", "if_expression", "for_expression", "while_expression", "match_expression"],
        "sig": ["function_item", "function_signature_item"],
        "body": ["block"],
        "method": ["function_item"],
        "import": ["use_declaration"]
      }
    },
    "ruby": {
      "scopes": {
        "func": ["method", "lambda"],
        "class": ["class", "module"],
        "block": ["do_block", "block", "if", "for", "while", "case"],
        "sig": ["method"],
        "body": ["do_block", "block"],
        "method": ["method"],
        "import": ["require", "load"]
      }
    },
    "php": {
      "scopes": {
        "func": ["function_definition", "method_declaration"],
        "class": ["class_declaration", "interface_declaration", "trait_declaration"],
        "block": ["compound_statement", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["function_definition", "method_declaration"],
        "body": ["compound_statement"],
        "method": ["method_declaration"],
        "import": ["use_statement", "require_expression", "include_expression"]
      }
    },
    "c": {
      "scopes": {
        "func": ["function_definition"],
        "class": ["struct_specifier", "union_specifier"],
        "block": ["compound_statement", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["function_declarator"],
        "body": ["compound_statement"],
        "method": ["function_definition"],
        "import": ["preproc_include"]
      }
    },
    "cpp": {
      "scopes": {
        "func": ["function_definition", "lambda_expression"],
        "class": ["class_specifier", "struct_specifier", "union_specifier"],
        "block": ["compound_statement", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["function_declarator"],
        "body": ["compound_statement", "field_declaration_list"],
        "method": ["function_definition"],
        "import": ["preproc_include", "using_declaration"]
      }
    },
    "swift": {
      "scopes": {
        "func": ["function_declaration"],
        "class": ["class_declaration", "struct_declaration", "protocol_declaration", "enum_declaration"],
        "block": ["code_block", "if_statement", "for_statement", "while_statement", "try_statement", "switch_statement"],
        "sig": ["function_declaration"],
        "body": ["code_block", "class_body"],
        "method": ["function_declaration"],
        "import": ["import_declaration"]
      }
    },
    "kotlin": {
      "scopes": {
        "func": ["function_declaration", "anonymous_function"],
        "class": ["class_declaration", "object_declaration", "interface_declaration"],
        "block": ["statements", "if_expression", "for_statement", "while_statement", "when_expression"],
        "sig": ["function_declaration"],
        "body": ["statements", "class_body"],
        "method": ["function_declaration"],
        "import": ["import_header"]
      }
    }
  }
}